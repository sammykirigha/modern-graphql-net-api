// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ServiceProvider.Data.Contexts;

#nullable disable

namespace ServiceProvider.Data.Migrations
{
    [DbContext(typeof(ServiceProviderContext))]
    [Migration("20240522071403_updatedRelationships")]
    partial class updatedRelationships
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("sp")
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ServiceProvider.Core.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2(3)");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("SP_Category", "sp");
                });

            modelBuilder.Entity("ServiceProvider.Core.Models.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2(3)");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid?>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("LocationId");

                    b.HasIndex("ServiceId");

                    b.ToTable("SP_Client", "sp");
                });

            modelBuilder.Entity("ServiceProvider.Core.Models.ClientsServices", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2(3)");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2(3)");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ServiceId");

                    b.ToTable("SP_ClientsServices", "sp");
                });

            modelBuilder.Entity("ServiceProvider.Core.Models.EntityLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ActiveUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActiveUserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte>("Category")
                        .HasColumnType("tinyint");

                    b.Property<string>("ChangeReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ChangeTrigger")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<byte>("ChangeType")
                        .HasColumnType("tinyint");

                    b.Property<string>("Changes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2(3)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("Entity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("LoggedInUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoggedInUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PrimaryKey")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ActiveUserId");

                    b.HasIndex("UserId");

                    b.ToTable("SP_EntityLog", "sp");
                });

            modelBuilder.Entity("ServiceProvider.Core.Models.ErrorLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ActiveUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ActiveUserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2(3)");

                    b.Property<Guid?>("LoggedInUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoggedInUserName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ActiveUserId");

                    b.HasIndex("LoggedInUserId");

                    b.ToTable("SP_ErrorLog", "sp");
                });

            modelBuilder.Entity("ServiceProvider.Core.Models.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("County")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2(3)");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("Town")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("SP_Location", "sp");
                });

            modelBuilder.Entity("ServiceProvider.Core.Models.LoginLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("Reason")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Valid")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SP_LoginLog", "sp");
                });

            modelBuilder.Entity("ServiceProvider.Core.Models.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2(3)");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("SP_Permission", "sp");
                });

            modelBuilder.Entity("ServiceProvider.Core.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2(3)");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("SP_Role", "sp");
                });

            modelBuilder.Entity("ServiceProvider.Core.Models.RolePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2(3)");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2(3)");

                    b.Property<Guid?>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("SP_RolePermission", "sp");
                });

            modelBuilder.Entity("ServiceProvider.Core.Models.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2(3)");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2(3)");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(19,4)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("SP_Service", "sp");
                });

            modelBuilder.Entity("ServiceProvider.Core.Models.ServiceLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2(3)");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2(3)");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("ServiceId");

                    b.ToTable("SP_ServiceLocation", "sp");
                });

            modelBuilder.Entity("ServiceProvider.Core.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AccessGlobalSettings")
                        .HasColumnType("bit");

                    b.Property<byte>("AccessLevel")
                        .HasColumnType("tinyint");

                    b.Property<byte>("AccessType")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("AdminLoginDate")
                        .HasColumnType("datetime2(3)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2(3)");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2(3)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("SP_User", "sp");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dcfaff46-e2c3-4b3d-ba44-dfe86b9dfcd3"),
                            AccessGlobalSettings = false,
                            AccessLevel = (byte)2,
                            AccessType = (byte)0,
                            DateCreated = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateModified = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "admin@none.com",
                            FirstName = "ADM",
                            IsActive = true,
                            LastName = "Admin"
                        },
                        new
                        {
                            Id = new Guid("17ff54a6-9d9a-45dc-95ea-10b68b9e6378"),
                            AccessGlobalSettings = false,
                            AccessLevel = (byte)0,
                            AccessType = (byte)0,
                            DateCreated = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateModified = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "sam@none.com",
                            FirstName = "Sam",
                            IsActive = true,
                            LastName = "Admin"
                        },
                        new
                        {
                            Id = new Guid("4315515f-9932-49b7-a01d-7261047ed1c9"),
                            AccessGlobalSettings = false,
                            AccessLevel = (byte)1,
                            AccessType = (byte)1,
                            DateCreated = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateModified = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "dorcis@none.com",
                            FirstName = "Dorcis",
                            IsActive = true,
                            LastName = "Admin"
                        });
                });

            modelBuilder.Entity("ServiceProvider.Core.Models.UserPermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2(3)");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2(3)");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("UserId");

                    b.ToTable("SP_UserPermission", "sp");
                });

            modelBuilder.Entity("ServiceProvider.Core.Models.Client", b =>
                {
                    b.HasOne("ServiceProvider.Core.Models.Location", "Location")
                        .WithMany("Clients")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServiceProvider.Core.Models.Service", null)
                        .WithMany("Clients")
                        .HasForeignKey("ServiceId");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("ServiceProvider.Core.Models.ClientsServices", b =>
                {
                    b.HasOne("ServiceProvider.Core.Models.Client", "Client")
                        .WithMany("ClientServices")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ServiceProvider.Core.Models.Service", "Service")
                        .WithMany("ClientServices")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("ServiceProvider.Core.Models.EntityLog", b =>
                {
                    b.HasOne("ServiceProvider.Core.Models.User", "ActiveUser")
                        .WithMany("EntityLogsActive")
                        .HasForeignKey("ActiveUserId");

                    b.HasOne("ServiceProvider.Core.Models.User", null)
                        .WithMany("EntityLogsLoggedIn")
                        .HasForeignKey("UserId");

                    b.Navigation("ActiveUser");
                });

            modelBuilder.Entity("ServiceProvider.Core.Models.ErrorLog", b =>
                {
                    b.HasOne("ServiceProvider.Core.Models.User", "ActiveUser")
                        .WithMany("ErrorLogsActive")
                        .HasForeignKey("ActiveUserId");

                    b.HasOne("ServiceProvider.Core.Models.User", "LoggedInUser")
                        .WithMany("ErrorLogsLoggedIn")
                        .HasForeignKey("LoggedInUserId");

                    b.Navigation("ActiveUser");

                    b.Navigation("LoggedInUser");
                });

            modelBuilder.Entity("ServiceProvider.Core.Models.LoginLog", b =>
                {
                    b.HasOne("ServiceProvider.Core.Models.User", "User")
                        .WithMany("LoginLogs")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ServiceProvider.Core.Models.RolePermission", b =>
                {
                    b.HasOne("ServiceProvider.Core.Models.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId");

                    b.HasOne("ServiceProvider.Core.Models.Role", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ServiceProvider.Core.Models.Service", b =>
                {
                    b.HasOne("ServiceProvider.Core.Models.Category", "Category")
                        .WithMany("Services")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ServiceProvider.Core.Models.ServiceLocation", b =>
                {
                    b.HasOne("ServiceProvider.Core.Models.Location", "Location")
                        .WithMany("ServiceLocations")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServiceProvider.Core.Models.Service", "Service")
                        .WithMany("ServiceLocations")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("ServiceProvider.Core.Models.User", b =>
                {
                    b.HasOne("ServiceProvider.Core.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ServiceProvider.Core.Models.UserPermission", b =>
                {
                    b.HasOne("ServiceProvider.Core.Models.Permission", "Permission")
                        .WithMany("UserPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ServiceProvider.Core.Models.User", "User")
                        .WithMany("Permissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ServiceProvider.Core.Models.Category", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("ServiceProvider.Core.Models.Client", b =>
                {
                    b.Navigation("ClientServices");
                });

            modelBuilder.Entity("ServiceProvider.Core.Models.Location", b =>
                {
                    b.Navigation("Clients");

                    b.Navigation("ServiceLocations");
                });

            modelBuilder.Entity("ServiceProvider.Core.Models.Permission", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserPermissions");
                });

            modelBuilder.Entity("ServiceProvider.Core.Models.Role", b =>
                {
                    b.Navigation("Permissions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ServiceProvider.Core.Models.Service", b =>
                {
                    b.Navigation("ClientServices");

                    b.Navigation("Clients");

                    b.Navigation("ServiceLocations");
                });

            modelBuilder.Entity("ServiceProvider.Core.Models.User", b =>
                {
                    b.Navigation("EntityLogsActive");

                    b.Navigation("EntityLogsLoggedIn");

                    b.Navigation("ErrorLogsActive");

                    b.Navigation("ErrorLogsLoggedIn");

                    b.Navigation("LoginLogs");

                    b.Navigation("Permissions");
                });
#pragma warning restore 612, 618
        }
    }
}
